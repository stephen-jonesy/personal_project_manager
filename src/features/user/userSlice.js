import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

const initialState = {
  status: 'idle',
  data: [],
  error: null,
  loggedIn: false

}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getUserThunk = createAsyncThunk(
  'user/fetchUser',
  async () => {

    const token = sessionStorage.getItem('auth_token');

    const config = {
      headers: { Authorization: `Bearer ${token}` }
    };
    const response = await fetch('http://127.0.0.1:8000/api/user', config)
    return await response.json();

    // The value we return becomes the `fulfilled` action payload

  }
);

export const LogIn = createAsyncThunk(
  'user/login',
  async () => {

    const user = {
      email: 'stephen-jones@hotmail.co.uk',
      password: '123456',
    };


    const config = {
      method: 'POST',
      headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
      },
      body: JSON.stringify(user)
    };
    
    const response = await fetch('http://localhost:8000/api/login/', config)
    return await response.json();
    // The value we return becomes the `fulfilled` action payload

  }


);

export const logOut = createAsyncThunk(
  'user/logout',
  async () => {

    const token = sessionStorage.getItem('auth_token');
    const config = {
      method: 'POST',
      headers: { Authorization: `Bearer ${token}` }
    };
    
    const response = await fetch('http://localhost:8000/api/logout', config)
    sessionStorage.removeItem("auth_token");

    return await response.json();

    // The value we return becomes the `fulfilled` action payload

  }
);

export const usersSlice = createSlice({
  name: 'usersSlice',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getUserThunk.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
        state.loggedIn = true;

      })
      .addCase(getUserThunk.rejected, (state, action) => {
        state.status = 'Rejected';
        state.error = action.error;

      })
      .addCase(LogIn.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(LogIn.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedIn = true;
        state.data = action.payload.user;
        sessionStorage.setItem('auth_token', action.payload.token); 
       
      })
      .addCase(LogIn.rejected, (state, action) => {
        state.status = 'Rejected';
        state.error = action.error;
      

      })
      .addCase(logOut.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logOut.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedIn = false;
        state.data = action.payload;


      })
      .addCase(logOut.rejected, (state, action) => {
        state.status = 'Rejected';
        state.error = action.error;

      })
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default usersSlice.reducer;
